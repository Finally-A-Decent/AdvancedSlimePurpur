From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paul19988 <paul@paulcodes.co.uk>
Date: Sat, 12 Aug 2023 23:04:25 +0100
Subject: [PATCH] poi data loader


diff --git a/src/main/java/com/infernalsuite/aswm/level/ChunkDataLoadTask.java b/src/main/java/com/infernalsuite/aswm/level/ChunkDataLoadTask.java
index 7b6dc735bb99d684a00bec580f6f5e749f1cd6f9..f417056ddcab00a596e65934afe9986acbe14e9d 100644
--- a/src/main/java/com/infernalsuite/aswm/level/ChunkDataLoadTask.java
+++ b/src/main/java/com/infernalsuite/aswm/level/ChunkDataLoadTask.java
@@ -73,13 +73,16 @@ public final class ChunkDataLoadTask implements CommonLoadTask {
             //                }
 
             LevelChunk chunk = this.world.slimeInstance.promote(chunkX, chunkZ, data);
-
-            final PoiChunk poiChunk = chunk.getChunkHolder().getPoiChunk();
-            if (poiChunk == null) {
-                LOGGER.error("Unable to locate poi for chunk " + this.chunkX + ", " + this.chunkZ);
-            } else {
-                poiChunk.load();
-            }
+            System.out.println("STATUS: " + this.world.slimeInstance.getInstance().chunkSource.getPoiManager());
+
+//            this.world.getPoiManager().getOrLoad(ChunkPos.asLong(this.chunkX, this.chunkZ)).ifPresent(poiSection -> {
+//
+//            });
+//            if (poiChunk == null) {
+//                LOGGER.error("Unable to locate poi for chunk " + this.chunkX + ", " + this.chunkZ);
+//            } else {
+//                poiChunk.load();
+//            }
 
             return new ImposterProtoChunk(chunk, false);
         } catch (final ThreadDeath death) {
diff --git a/src/main/java/io/papermc/paper/chunk/system/poi/PoiChunk.java b/src/main/java/io/papermc/paper/chunk/system/poi/PoiChunk.java
index d72041aa814ff179e6e29a45dcd359a91d426d47..9c16cd0728d2252cf4dadb45779e2ad0e8ca4c0e 100644
--- a/src/main/java/io/papermc/paper/chunk/system/poi/PoiChunk.java
+++ b/src/main/java/io/papermc/paper/chunk/system/poi/PoiChunk.java
@@ -18,7 +18,7 @@ import org.slf4j.Logger;
 
 import java.util.Optional;
 
-public final class PoiChunk {
+public class PoiChunk {
 
     private static final Logger LOGGER = LogUtils.getClassLogger();
 
