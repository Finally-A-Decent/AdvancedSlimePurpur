From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paul19988 <paul@paulcodes.co.uk>
Date: Sat, 12 Aug 2023 22:16:19 +0100
Subject: [PATCH] poi data loader


diff --git a/src/main/java/com/infernalsuite/aswm/level/ChunkDataLoadTask.java b/src/main/java/com/infernalsuite/aswm/level/ChunkDataLoadTask.java
index 3980d993f5d441587675a0f07cda6416aebab96d..7b6dc735bb99d684a00bec580f6f5e749f1cd6f9 100644
--- a/src/main/java/com/infernalsuite/aswm/level/ChunkDataLoadTask.java
+++ b/src/main/java/com/infernalsuite/aswm/level/ChunkDataLoadTask.java
@@ -64,13 +64,6 @@ public final class ChunkDataLoadTask implements CommonLoadTask {
     }
 
     protected ChunkAccess runOnMain(final SlimeChunk data) {
-        final PoiChunk poiChunk = this.world.chunkTaskScheduler.chunkHolderManager.getPoiChunkIfLoaded(this.chunkX, this.chunkZ, true);
-        if (poiChunk == null) {
-            LOGGER.error("Expected poi chunk to be loaded with chunk for task " + this.toString());
-        } else {
-            poiChunk.load();
-        }
-
         // have tasks to run (at this point, it's just the POI consistency checking)
         try {
             //                if (data.tasks != null) {
@@ -81,6 +74,13 @@ public final class ChunkDataLoadTask implements CommonLoadTask {
 
             LevelChunk chunk = this.world.slimeInstance.promote(chunkX, chunkZ, data);
 
+            final PoiChunk poiChunk = chunk.getChunkHolder().getPoiChunk();
+            if (poiChunk == null) {
+                LOGGER.error("Unable to locate poi for chunk " + this.chunkX + ", " + this.chunkZ);
+            } else {
+                poiChunk.load();
+            }
+
             return new ImposterProtoChunk(chunk, false);
         } catch (final ThreadDeath death) {
             throw death;
